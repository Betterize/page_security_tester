---
import ConfirmScan from "@components/modals/ConfirmScan.astro";
import ScanConfirmationResult from "@components/modals/ScanConfirmationResult.astro";
import ScanCreateError from "@components/modals/ScanCreateError.astro";
---

<div class="w-full mx-auto max-w-196">
  <form id="scanForm" class="space-y-4" data-redirection="/thank_you">
    <div data-error="W to pole można wpisać maksymalnie 50 znaków.">
      <label
        for="website"
        class="block pl-2 font-medium text-left text-gray-300"
        >Your website address</label
      >
      <input
        class="w-full p-3 text-sm font-light border-gray-200 rounded-lg bg-neutral-800"
        placeholder="https://betterize.pl"
        type="url"
        id="website"
        name="website"
        aria-label="Your website url"
        maxlength="50"
        autocomplete="off"
        data-error-required="msg"
        oninput="this.setCustomValidity('')"
                oninvalid="setErrorMessage(this)"
      />
    </div>

    <div data-error="W to pole można wpisać maksymalnie 50 znaków.">
      <label for="email" class="block pl-2 font-medium text-left text-gray-300"
        >Your email</label
      >
      <input
        class="w-full p-3 text-sm font-light border-gray-200 rounded-lg bg-neutral-800"
        placeholder="contact@example.com"
        type="email"
        id="email"
        name="email"
        aria-label="Your email"
        maxlength="50"
        autocomplete="off"
        data-error-required="msg"
        oninput="this.setCustomValidity('')"
                oninvalid="setErrorMessage(this)"
      />
    </div>

    <div>
      <div class="flex gap-2 p-1">
        <input
          type="checkbox"
          id="regulations"
          name="regulations"
          class="my-auto"
        />
        <label for="regulations"
          ><a
            class="underline text-violet-400 underline-offset-2 hover:opacity-50"
            href="/regulations/marketing">Accept tool regulations</a
          ></label
        >
      </div>
      <div class="flex gap-2 p-1">
        <input type="checkbox" id="rodo" name="rodo" class="my-auto" />
        <label for="rodo"
          ><a
            class="underline text-violet-400 underline-offset-2 hover:opacity-50"
            href="/regulations/marketing">Accept RODO regulations</a
          ></label
        >
      </div>
      <div class="flex gap-2 p-1">
        <input
          type="checkbox"
          id="marketing"
          name="marketing"
          class="my-auto"
        />
        <label for="marketing"
          ><a
            class="underline text-violet-400 underline-offset-2 hover:opacity-50"
            href="/regulations/marketing">Accept marketing regulations</a
          ></label
        >
      </div>
    </div>

    <button
      id="submit-button"
      type="submit"
      class="rounded-lg disabled:bg-blue-600/30 w-full justify-center md:w-auto flex font-medium bg-blue-600 text-center text-white py-3 px-16 transition-smooth enabled:hover:(bg-blue-600/50 shadow-xl shadow-blue-600/20)"
      disabled
    >
      Scan
    </button>
  </form>
  <ConfirmScan />
  <ScanConfirmationResult />
  <ScanCreateError />
</div>

<script is:inline>
function setErrorMessage(input) {
  if (input.validity.valueMissing) {
    input.setCustomValidity(input.getAttribute("data-error-required"));
  } else if (input.validity.typeMismatch) {
    input.setCustomValidity(input.getAttribute("data-error-invalid"));
  } else {
    input.setCustomValidity("");
  }
}
</script>

<style>
  /* Twoje istniejące style CSS */

  #responseInfo {
    font-weight: bold;
    color: red;
    font-size: 34px;
    padding: 8px;
  }
  div[data-error] .input {
    border-color: red;
    background-color: #fffafa;
  }
</style>

<script>
  import { sendContactRequest } from "src/typescript/securityScanForm";

  async function onSubmit(event: SubmitEvent) {
    let thisForm = event.target as HTMLFormElement;
    const redirection = thisForm?.dataset.redirection;

    event.preventDefault();
    event.stopPropagation();

    const onSuccess = () => {
      if (redirection) {
        window.location.assign(redirection);
      }
    };

    const onError = (error: string) => {
      const responseInfo = document.getElementById("responseInfo");

      if (responseInfo) {
        responseInfo.innerHTML = error;
      }
    };

    const form = event.target as HTMLFormElement; // Get the form that was submitted
    window.location.assign(redirection);
  }

  const form = document.getElementById("scanForm") as HTMLFormElement;
  if (form) {
    form.addEventListener("submit", onSubmit);
  } else {
    console.error("BUG: element with id=scanForm not found !!!");
  }

  document.addEventListener("DOMContentLoaded", function () {
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    const button = document.getElementById(
      "submit-button"
    ) as HTMLButtonElement;

    const required_approvals = [...checkboxes].filter(
      (element) => element.id != "marketing"
    ) as HTMLInputElement[];

    required_approvals.forEach((checkbox) => {
      checkbox.addEventListener("click", function () {
        if (this.checked) {
          button.disabled = !required_approvals.every(
            (checkbox) => checkbox.checked
          );
        } else {
          button.disabled = true;
        }
      });
    });
  });
</script>
