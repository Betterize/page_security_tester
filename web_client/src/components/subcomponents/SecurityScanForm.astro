---
import ConfirmScan from "@components/modals/ConfirmScan.astro";
import ScanConfirmationSucced from "@components/modals/ScanConfirmationSucced.astro";
import ScanCreateError from "@components/modals/ScanCreateError.astro";
import ScanRegulations from "./ScanRegulations.astro";
---

<div class="w-full mx-auto max-w-196">
  <form id="scanForm" class="space-y-4">
    <div data-error="W to pole można wpisać maksymalnie 50 znaków.">
      <label
        for="website"
        class="block pl-2 font-medium text-left text-gray-300"
        >Your website address</label
      >
      <input
        class="w-full p-3 text-sm font-light border-gray-200 rounded-lg bg-neutral-800"
        placeholder="https://betterize.pl"
        type="url"
        id="website"
        name="website"
        aria-label="Your website url"
        maxlength="50"
        autocomplete="off"
        data-error-required="msg"
        oninput="this.setCustomValidity('')"
                oninvalid="setErrorMessage(this)"
      />
    </div>

    <div data-error="W to pole można wpisać maksymalnie 50 znaków.">
      <label for="email" class="block pl-2 font-medium text-left text-gray-300"
        >Your email</label
      >
      <input
        class="w-full p-3 text-sm font-light border-gray-200 rounded-lg bg-neutral-800"
        placeholder="contact@example.com"
        type="email"
        id="email"
        name="email"
        aria-label="Your email"
        maxlength="50"
        autocomplete="off"
        data-error-required="msg"
        oninput="this.setCustomValidity('')"
                oninvalid="setErrorMessage(this)"
      />
    </div>
    <ScanRegulations />
  </form>

  <!-- Modals -->
  <ConfirmScan />
  <ScanConfirmationSucced />
  <ScanCreateError />
</div>

<script is:inline>
function setErrorMessage(input) {
  if (input.validity.valueMissing) {
    input.setCustomValidity(input.getAttribute("data-error-required"));
  } else if (input.validity.typeMismatch) {
    input.setCustomValidity(input.getAttribute("data-error-invalid"));
  } else {
    input.setCustomValidity("");
  }
}
</script>

<style>
  /* Twoje istniejące style CSS */

  #responseInfo {
    font-weight: bold;
    color: red;
    font-size: 34px;
    padding: 8px;
  }
  div[data-error] .input {
    border-color: red;
    background-color: #fffafa;
  }
</style>

<script>
  import { sendScanRequest } from "src/typescript/securityScanForm";

  const validation_code_modal = document.getElementById(
    "validationCodeModal"
  ) as HTMLModElement;
  const scan_create_modal = document.getElementById(
    "scanCreateErrorModal"
  ) as HTMLModElement;

  // -------------------------------------------
  //  Verify code modal from form
  // -------------------------------------------

  const showVerifyCodeModal = document.getElementById(
    "show-verify-code-modal"
  ) as HTMLDivElement;

  showVerifyCodeModal.addEventListener("click", () => {
    validation_code_modal.classList.remove("hidden");
  });

  // -------------------------------------------

  async function onSubmit(event: SubmitEvent) {
    event.preventDefault();
    event.stopPropagation();

    const onSuccess = () => {
      validation_code_modal.classList.remove("hidden");
    };

    const onError = (error: string) => {
      const responseInfo = document.getElementById(
        "modal-error-msg"
      ) as HTMLParagraphElement;

      responseInfo.innerHTML = error;

      scan_create_modal.classList.remove("hidden");
    };

    const form = event.target as HTMLFormElement; // Get the form that was submitted

    await sendScanRequest(form, onSuccess, onError);
  }

  const form = document.getElementById("scanForm") as HTMLFormElement;
  if (form) {
    form.addEventListener("submit", onSubmit);
  } else {
    console.error("BUG: element with id=scanForm not found !!!");
  }
</script>
